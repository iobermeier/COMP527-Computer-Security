# Problem 2
part_a_var_english=0.0010821894444615384
part_b_var_plaintext=0.0010519944079727267
part_c_var_ciphertexts=[0.0005500069491566993, 0.00034671223133333877, 0.00022776228978800984, 0.00017326128011641885, 0.00015829688432515517]
part_c_explain="As the number of characters in the key grows, the frequency variance of the cipher reduces."
part_d_means=[0.0011308125608051212, 0.0011398328118600793, 0.0012397188828560325, 0.0011984924417701545, 0.0013005285653273956]
part_d_explain="The mean variances in part d are very similar to those of part b, likely due to the fact that the mean evaluates over the total input as part b did rather than based on the length of the key as computed in partc. The variances from part c are heavily influenced by the length of the key, whereas the means negate most of that influence. "
part_e_means=[0.0039015856959821868, 0.002601057130654791, 0.0019507928479910934, 0.0015606342783928747]
part_e_explain="Yes, since lower variance means that data does not vary greatly, then changing the length for which we calculate the means of the frequency variances can indicate the true length of the key for decoding a message. The calculations from parte show that as the key gets bigger, the mean gets smaller and shows less variation. This tactic could have been helpful in the first part for deducing how long the key is."


Steps for each part:

Part a) In order to calculate the frequency variance of the letters from the dictionary, first the variances are read into a list.
Second, Python's function, 'variance' from the statistics library can calculate the variance and mean for a data set. This function
is used in all other variance calculations as well.

Part b) Since the plaintext does not provide the relative frequencies of each letter, we need to compute it ourselves.
The function, 'calc_var' (lines 25 - 37) is created to count the relative frequency of a letter and calculate the variance over all letters.
This function cycles through all the letters in the alphabet and counts how many times that individual letter is in the plaintext. Its relative
frequency is manually calculated by dividing the number of times it appears by the total number of plaintext letters. For example, the output of the relative frequencies is:
[a = 0.0731958762886598, b = 0.01443298969072165, c = 0.04329896907216495, d = 0.031958762886597936, e = 0.12474226804123711, f = 0.018556701030927835, g = 0.015463917525773196, 
h = 0.032989690721649485, i = 0.08144329896907217, j = 0.0010309278350515464, k = 0.005154639175257732, l = 0.049484536082474224, m = 0.021649484536082474, n = 0.0731958762886598, 
o = 0.06804123711340206, p = 0.02268041237113402, q = 0.003092783505154639, r = 0.06288659793814433, s = 0.07216494845360824, t = 0.08041237113402062, u = 0.04639175257731959, 
v = 0.012371134020618556, w = 0.01443298969072165, x = 0.0010309278350515464, y = 0.0288659793814433, z = 0.0010309278350515464]
The variance of all letters is computed and returned to the terminal. The 'calc_var' function is used in all future relative frequency calculations.

Part c) To encrypt the plaintext with the given keys, the program cycles through the plaintext characters and adds its alphabet index to the alphabet index of the character of the key.
If the character's index goes beyond 26, we wrap around to a by subtracting 26 and then get the letter at that index. Basically, the plaintext is converted to a number, added with the 
numerical value of the key, and converted back into a letter, resulting in the encoded ciphertext. The associated ciphertexts are as follows:

['y', 'z'] encoded word is: csfharjzuzlcsmgucqqhrxnnjhahcruzpmgmesmccecmbzqxqsclwnsmcdbsmaczzkcsmsfhljjhidymysrzajcqymbsfzrhlbjtbdqtlccqqsymbhlfrdaglhotcrrgysazlactqdbsmbmlnqmlgrcrcbsqgswgmvcucqsrgmesfnqdrdaglhotcrgmrgcqczjvmqjckzwugnjzrdrgckyvmqrgctlhtdprgswrptjdqzlcgskzwactldrggbyksmbdprmlcbgqatkrrzlbcrcucmnqmagmeemqudyjldqrcrkzwqcrskrhlrcucqcocmykrhcrsornymbhlbjtbhlfcwntjrgnlbgugkdhldqzlchzgkrhkdmtpomkgbwhldcbqhqsfzrxmtktqspdqocbrsfdnqguybwzlcnqmocqrxphegrrmemsfdprysykjsglcrmqckqdwnsvgkjeyhjsfdansqqdybrhlfjzueskjxymbdrggbykjxgrwnsqpdqommqhzhjhrxazpddtjkwqczbsfdankosscqdqytbzlcyasrczasaeyzyecccqykqsyssscsfzrapnycjxaqglgmykgycrankosscqgmrqsrgnlsfhqhqnldmeqdtdpzjkyvqsfzrfmucqlgybihlfsmbdprrzlcugysrgckyvnqmggagsqhdhlcmtzsudazlqcecqwnssmzlzrsmqldwojdyrcqcugduhrrqomkgbgdqnlqcrnnlrgajdsrcndscbfmmkmfwqcrmtpbcrymbbydlrnnjhaxbnatkdlsqemqetgcckgmcranlbcqlhlfnqmocqsrcndhlemqkzrhmmrdaglnjnexysslyrudjkyrrgcdlfgmcdphlffnlnpbmcczqlclzdprmergctlhtdprgswbmlktlhrxwnszpdpdotgqccrnyagccawsfdqdnnjhahcr
['x', 'y', 'z'] encoded word is: brgfariyvxlcrlhscqpgsvnnigbfcrtyqkgmdrnaceblcxqxprdjwnrldbbslzdxzkbrnqfhkikfidxlzqrzzidoymargxrhkakrbdpsmacqprzkbhkesbagkgprcrqfzqazkzdrqdarnzmlmpnjgrbqdzsqfrxemvbtdosrflfqfnpcsbagkgprcrflsecqbyktmqiblxwufmkxrdqfdiyvlpsectkgubprfrxppticrxlcfrlxwabsmbrgfazismacqpmlbahoatjqsxlbbqdscmmpnygmddnoudximbqrbqlxwqbqtirhkqdscqbndkykqgdpsoqmzkbhkakrbhkeduntiqhllbfthidhkcrxlcgyhirhjcnrpoljhzwhkcdzqhprgxrxlslrqsocrmcbqrgbnqftzzwzkboomobpsvphdfspmelrgbprxrzijsfkdpmqbjrbwnruhijexgkqfdzmtoqdxasflfiyvcskiwzkbdqfhzykiwhpwnrpqbqollrfzhigsvazocerjkvpdxbsecblkorrdodqxscxlcxztpczzrbcyzxddacqxjrqysrrdqfzqzqlyciwboglflzigybqblkorrdogmqptpgnkrgfqhpmmbmepcubpzijztqseysdmubpmeybhgmdsmacqprzkbveysqfdiyvmpnegafrrfdhkbnrzstcbxlqbddownrrnxlzqrnoldvnkbyrbpdsgdtgspqoljhzgdpmmocrmmmpgaictpcncrdzfmljndwqbqnrpbbqzkbbxcmpnnigbvbnzslblspdnoetfbdigmbqbllbbpmflfmpnmcqrqdldhkdnokzqgnkrdzfmljndwzqslxqvbjkxqsecdkehkcdogmdfnkmqzmcbyrjclycqpmeqfdrlhscqpgsvanjktkgsvwnryqbpdnshoccqmzygcbzxqfdpcoljhzgdp
['w', 'x', 'y', 'z'] encoded word is: aqfhypjzsxlcqkguaoqhpvnnhfahapuznkgmcqmcaccmzxqxoqclulsmabbskyczxicskqfhjhjhgbymwqrzyhcqwkbsdxrhjzjtzbqtjacqoqymzflfpbagjfotaprgwqazjyctobbskzmllomlepcrazsqeqwgktcuaosrekesdlqdpbagjfotapgmpecqaxjvkojcixwueljzpbrgaiyvkorgarlhrbpreqwrnrjdoxlceqkzuyctjbrgezykqkbdnpmlazgqyrkrpxlbapcuaknqkygmccmqsbyjjbqrapkzuocrqirhjpcuaocoakykpfcrqmrnwkbhjzjtzflfaunthpgnjzgueidhjbqzjahzeirhibmtnmmkezwhjbcbofqsdxrxkrktoqpdomcbpqfdloguwzwzjanqkmcqpvphcerrkcmsdbprwqykhqglapmqaiqdulsveijewfjsdbanqoqdwzrhjdjzscskhvymzbrgezykhvgrulsqnbqokkqhxfjhpvaznbdthiwqaxbsdbanimssaodqwrbzjayaqpczyqaewxyeaacqwiqswqssaqfzpypnwajxyoglekykewcrylkoqqcqekrqqpgnjqfhofqnjbmeobtdnxjkwtqsdxrfkscqjeybgflfqkbdnprzjaugwqrgaiyvlomgeygsofdhjamtxqudyxlqaccqulsskxlzpqmqjbwohbyraocuebuhppqokigbebqnjocrlllreyjdqpcnbqcbdkmkkdwqapmtnzcrwkbbwblrlljhyvbnyrkdjqqekoeteackekcryllbaolhjdnqkmcqqpcnbflekokzpfmmpbagjljncvysqjyrsbjkwprgablfekcdnflfdllnnzmcaxqlajzdnpmepectjftdnpgsuzmlirlhpvwnqxpdnboteoccplyaeacauqfdobnnhfahap
['v', 'w', 'x', 'y', 'z'] encoded word is: zpegbnhxuzizrlhqaoqhoummkdyfcrrwolhicqmczbblcvovqszivmtiabbsjxbyagaqmscekikdgbymvpqybfaoymypeysdjzjtyapsmyaoqsvjagmbpbagiensdnpeysxwkzdpobbsjylkomkjgrzobatmeqwgjsbtdmqpgmbpemrzpbagiensdnekrgznbykrkojchwvthjhxrdodbjzrkorgzqkguznpgstooskzoxlcdpjyxwarldodfazgqkbdmolkdxeoathoqymxapcuzjmpnwekeejntczfjbqrzojyxmapskoekqdqaocozjxjsdapsookxlcdjzjtyekedslrjrdkkahqeidhiapymyfxgkoejcnpnmmkdyvgmzazqhnpeystkrktnpocrkazrscamphqwzwzizmpnkaorxmedfsnkcmscaoqzowijsdibqnmaiqdtkruhghcyhgpecbjqoqdvyqgmbhxuephiwzizbrgdyxjktepwnpnocrkkkqhweigstyxpdaqijxmaxbscazmlkqqcqanxscvjayapobyboycyzvbbbdmwiqsvprrdodxramkxbktyogldjxjhuapanhlrrdmekrqpofmmodfqhnkkcnaobtdmwijzroqfzocltdmjeybfeketizbprowkbvcwqrgzhxuomkegadppgedjamtwptcbvjoceznvmtokxlzoplpmzumjdvobpdqebuhoopnngezgdnkkpdnlllrdxictnaldszyelngkdwqzolsqxapymyyxcmnlljhxuambpiblsnblpfpeackdjbqbjjzcqiekeomkmcqpobmedjcmqhwqgnipbagikimftwqslvotckgwprgzakehiabphicemmjnzmczwpkdhxbprjbqfdpjftdmofrxxkjktieqwxjqxpdmanshmaarnvxfbdwuqfdnammkdyfcr
['u', 'v', 'w', 'x', 'y', 'z'] encoded word is: yodfarfvsxlcoiescqmdpvnnfdyfcrqvnkgmaokaceyizxqxmoajwnoiabbsiwaxzkyokqfhhfhfiduiwqrzwfaoymxodxrhhxhrbdmpjacqmowkbhhbpbaghdmrcrncwqazhwarqdxokzmljmkjgrynazsqcouemvyqaosrcicqfnmzpbaghdmrcrcipecqyvhtmqfyixwucjhxrdncaiyvimpecthdrbprcoupptfzoxlccoixwaypjbrgcxwismxznpmlyxeoatgnpxlbynascmjmkygmaakoudufjbqrynixwqynqirhhnascqykakykndapsonjwkbhhxhrbhhbauntfnellbcqeidhhzoxlcdveirhgzkrpoigezwhhzazqhmodxrxipirqslzomcbnodbnqcqwzwzhylomoympvphacppmeiodbpruowijschapmqygobwnoreijeudhqfdwjqoqduxpflffvscskftwkbdncezykftepwnomnbqoiiofzhfdpvazlzbrjksmaxbsbzylkoooaodqupzxlcuwqpczwoycyzuaaacqugoqysooaqfznwnlycftyoglciwigyynylkoooaogmnmqpgnhodfqhmjjbmemzrbpzfgwtqsbvpdmuymjeybedjdsmxznprzhyseysncaiyvjmkegacoofdhhykrzsqzyxlqyaaownookxlznokoldskhbyrymasgdqdppqoigezgdmjjocrjjjpgafzqpcnzoazfmigkdwqynkrpbynwkbbuzjpnnfdyvbnwpiblsmakoetcyaigmynyllbymjflfjmkmcqonaldhhakokzndkkrdwcjljnatwqslunsbjkunpecdhbekcdldjdfnhjnzmcyvojclvznpmencarlhpznpgssxkjkthdpvwnovnbpdkpeoccnjwygcywuqfdmzlljhwdap

In order to get the outputs of each key, we need to change the key number (variable 'key_num' on line 59) in which 0 = key y,z; 1 = key x,y,z; encrypt
With more time, this could be better optimized to get all key's outputs on one run. The frequency variances of each key are listed at the top of the file.

Part d) It is asked to split the ciphertext by the key letter it was encrypted by and run individual frequency variance calculations, then mean their results.
Through a naive approach, the program uses if...else statements to split the ciphertext based on the letter of the key. Depending on which key set we are running,
we use if...else statements to average the frequency variances using the 'calc_var' function. Because we use that function, there can be no empty sets, therefore
needing switch cases for each key length. The frequency variances of each key are listed at the top of the file.
An example of the split letters using the key y,z:
z key letters:  shrzzcmuqhxnhhrzmmscemzxslnmdsazksshjhdmszjqmszhbtdtcqsmhfdghtrgszatdsblqlrrbqsgvuqrmsnddghtrmgqzvqczunzdgkvqgthdrsrtdzcszatdgbkmdrlbqtrzbrumqameqdjdrrzqrkhruqomkhronmhbthfwtrnbukhdzczkhdtokbhdbhszxttsdobsdqubzcqoqxhgresdrskslrqkdnvkehsdnqdbhfzekxmdgbkxrnqdomhhhxzdtkqzsdnosqqtzcarzsezecqksssszancxqlmkyrnosqmqrnshhndeddzkvszfuqgbhfmdrzcgsgkvqgashhctsdzqeqnszzsqdodrqudhrokbdnqrnradrnsbmkfqrtbrmbdrnhxntdseqtckmrnbqhfqoqrnheqzhmdgnnxslrdkrgdfmdhfnnbczlldregthdrsblthxnzddtqcnacasddnhhr
y key letters:  cfajulsgcqrnjacupgemccbqqcwscbmczcmfljiyyracybfrljbqlcqyblralocryalcqbmmnmgccsgwmccsgefqralocgrccjmjkwgjrrcymrcltpgwpjqlgkwclrgysbpmcgakrlcccnmgemuylqckwcsrlccccyrcsrybljblcnjglggdlqlhgrkmpmgwlcqqfrmkqpqcrfngywlnmcrpermmfpyyjgcmcqwsgjyjfasqyrljusjybrgyjgwspqmqzjrapdjwcbfakscdyblyscaayyccyqyscfrpyjaggygcakscgrsglfqqlmqtpjyqfrmclyilsbprluyrcynmggqdlmzualccwsmlrmlwjyccgurqmggqlcnlgjscdcfmmwcmpcybylnjabaklqmegcgcalcllnmcscdlmkrmraljeysyujyrclgcplflpmcqczpmrcltpgwmklrwsppogcrygcwfqnjac


Part e) Under the fifth case of the mean frequency variance calculations (lines 108-110), for key u,v,w,x,y,z , we cycle through the different given lengths and 
using the 'calc_var' function can find their results. Since this is purely a mathematical calculation, the frequencies are listed at the top of the file.
